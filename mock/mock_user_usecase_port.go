// Code generated by MockGen. DO NOT EDIT.
// Source: user_usecase_port.go
//
// Generated by this command:
//
//	mockgen -source=user_usecase_port.go -destination=../../../../mock/mock_user_usecase_port.go -package=mock -self_package=maptalk/mock
//

// Package mock is a generated GoMock package.
package mock

import (
	port "maptalk/internal/domain/usecase/port"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserInput is a mock of UserInput interface.
type MockUserInput struct {
	ctrl     *gomock.Controller
	recorder *MockUserInputMockRecorder
}

// MockUserInputMockRecorder is the mock recorder for MockUserInput.
type MockUserInputMockRecorder struct {
	mock *MockUserInput
}

// NewMockUserInput creates a new mock instance.
func NewMockUserInput(ctrl *gomock.Controller) *MockUserInput {
	mock := &MockUserInput{ctrl: ctrl}
	mock.recorder = &MockUserInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInput) EXPECT() *MockUserInputMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockUserInput) GetUserByID(id string) (port.UserOutputData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(port.UserOutputData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserInputMockRecorder) GetUserByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserInput)(nil).GetUserByID), id)
}

// MockUserOutput is a mock of UserOutput interface.
type MockUserOutput struct {
	ctrl     *gomock.Controller
	recorder *MockUserOutputMockRecorder
}

// MockUserOutputMockRecorder is the mock recorder for MockUserOutput.
type MockUserOutputMockRecorder struct {
	mock *MockUserOutput
}

// NewMockUserOutput creates a new mock instance.
func NewMockUserOutput(ctrl *gomock.Controller) *MockUserOutput {
	mock := &MockUserOutput{ctrl: ctrl}
	mock.recorder = &MockUserOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserOutput) EXPECT() *MockUserOutputMockRecorder {
	return m.recorder
}

// PresentUser mocks base method.
func (m *MockUserOutput) PresentUser(user port.UserData) (port.UserOutputData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentUser", user)
	ret0, _ := ret[0].(port.UserOutputData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresentUser indicates an expected call of PresentUser.
func (mr *MockUserOutputMockRecorder) PresentUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentUser", reflect.TypeOf((*MockUserOutput)(nil).PresentUser), user)
}

// MockUserDataAccess is a mock of UserDataAccess interface.
type MockUserDataAccess struct {
	ctrl     *gomock.Controller
	recorder *MockUserDataAccessMockRecorder
}

// MockUserDataAccessMockRecorder is the mock recorder for MockUserDataAccess.
type MockUserDataAccessMockRecorder struct {
	mock *MockUserDataAccess
}

// NewMockUserDataAccess creates a new mock instance.
func NewMockUserDataAccess(ctrl *gomock.Controller) *MockUserDataAccess {
	mock := &MockUserDataAccess{ctrl: ctrl}
	mock.recorder = &MockUserDataAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDataAccess) EXPECT() *MockUserDataAccessMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockUserDataAccess) FindByID(id string) (port.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(port.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserDataAccessMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserDataAccess)(nil).FindByID), id)
}
